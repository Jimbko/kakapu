import { KodikSearchResult, ShikimoriAnime } from "../types";

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ CORS-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
const PROXY_URL = 'https://cors.kurume.moe/';
const KODIK_API_BASE = 'https://kodikapi.com';
const KODIK_INFO_BASE = 'https://kodik.info';

let cachedToken: string | null = null;

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞.
 * –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ kodik.info,
 * –∑–∞—Ç–µ–º –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö JS-—Å–∫—Ä–∏–ø—Ç–∞—Ö, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π.
 */
async function getKodikToken(): Promise<string> {
    if (cachedToken) {
        return cachedToken;
    }

    try {
        const response = await fetch(`${PROXY_URL}${KODIK_INFO_BASE}/`);
        const html = await response.text();
        
        const tokenMatch = html.match(/(?:token|api_token):\s*['"]([a-f0-9]{32})['"]/i);
        
        if (tokenMatch && tokenMatch[1]) {
            cachedToken = tokenMatch[1];
            console.log('‚úÖ –¢–æ–∫–µ–Ω Kodik —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
            return cachedToken;
        }

        const scriptMatches = html.match(/<script[^>]+src=["']([^"']+\.js)["']/gi);
        
        if (scriptMatches) {
            for (const scriptTag of scriptMatches.slice(0, 5)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–∫—Ä–∏–ø—Ç–æ–≤
                const srcMatch = scriptTag.match(/src=["']([^"']+)["']/);
                if (srcMatch) {
                    let scriptUrl = srcMatch[1];
                    if (scriptUrl.startsWith('//')) {
                        scriptUrl = 'https:' + scriptUrl;
                    } else if (scriptUrl.startsWith('/')) {
                        scriptUrl = KODIK_INFO_BASE + scriptUrl;
                    }

                    try {
                        const scriptResponse = await fetch(`${PROXY_URL}${scriptUrl}`);
                        const scriptText = await scriptResponse.text();
                        const scriptTokenMatch = scriptText.match(/(?:token|api_token):\s*['"]([a-f0-9]{32})['"]/i);
                        
                        if (scriptTokenMatch && scriptTokenMatch[1]) {
                            cachedToken = scriptTokenMatch[1];
                            console.log('‚úÖ –¢–æ–∫–µ–Ω Kodik –Ω–∞–π–¥–µ–Ω –≤ —Å–∫—Ä–∏–ø—Ç–µ');
                            return cachedToken;
                        }
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
                        continue;
                    }
                }
            }
        }

        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π');
        cachedToken = '3f72e96c268b3c43694060851e331b2c';
        return cachedToken;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        cachedToken = '3f72e96c268b3c43694060851e331b2c'; // Fallback token
        return cachedToken;
    }
}


/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Kodik, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—à –ø—Ä–æ–∫—Å–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–∫–µ–Ω–∞.
 */
const searchKodik = async (params: { shikimori_id?: number; title?: string }): Promise<KodikSearchResult | null> => {
    try {
        const token = await getKodikToken();
        const searchParams = new URLSearchParams({ token });
        
        if (params.shikimori_id) {
            searchParams.set('shikimori_id', String(params.shikimori_id));
        } else if (params.title) {
            searchParams.set('title', params.title);
        } else {
            return null; // –ù–µ—á–µ–≥–æ –∏—Å–∫–∞—Ç—å
        }
        
        console.log(`üîç –ü–æ–∏—Å–∫ –≤ Kodik: ${searchParams.toString()}`);
        
        const response = await fetch(`${PROXY_URL}${KODIK_API_BASE}/search?${searchParams.toString()}`, {
            method: 'POST', // Kodik API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç POST –¥–ª—è –ø–æ–∏—Å–∫–∞
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (!response.ok) {
            console.error(`Kodik API returned error: ${response.status}`);
            return null;
        }

        const data = await response.json();
        return (data.results && data.results.length > 0) ? data.results[0] : null;
    } catch (error) {
        console.error('Kodik search failed:', error);
        return null;
    }
};

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–µ–µ—Ä–∞ —Å –º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–π –ª–æ–≥–∏–∫–æ–π.
 */
export const findKodikPlayer = async (anime: ShikimoriAnime): Promise<KodikSearchResult | null> => {
    // 1. –ü–æ–∏—Å–∫ –ø–æ Shikimori ID (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
    console.log(`Kodik: –ü–æ–∏—Å–∫ –ø–æ shikimori_id ${anime.id}`);
    let result = await searchKodik({ shikimori_id: anime.id });
    if (result) return result;

    // 2. –§–æ–ª–±—ç–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if (anime.russian) {
        console.log(`Kodik: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ shikimori_id. –ò—â—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: "${anime.russian}"`);
        result = await searchKodik({ title: anime.russian });
        if (result) return result;
    }

    // 3. –§–æ–ª–±—ç–∫ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    console.log(`Kodik: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ä—É—Å—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é. –ò—â—É –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É: "${anime.name}"`);
    result = await searchKodik({ title: anime.name });
    if (result) return result;
    
    // 4. –§–æ–ª–±—ç–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    if (anime.english && anime.english.length > 0) {
        for (const title of anime.english) {
            if (title) {
                console.log(`Kodik: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É. –ò—â—É –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É: "${title}"`);
                result = await searchKodik({ title: title });
                if (result) return result;
            }
        }
    }

    console.log(`Kodik: –ü–ª–µ–µ—Ä –¥–ª—è –∞–Ω–∏–º–µ ID ${anime.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.`);
    return null;
};
