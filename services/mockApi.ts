import { Comment, UserProfile, UserAnimeList, ShikimoriAnime } from '../types';

// --- MOCK DATA ---

const mockUsers = {
  user1: { id: 'u1', name: 'AnimeFan123', avatar: 'https://i.pravatar.cc/150?u=a042581f4e29026704d' },
  user2: { id: 'u2', name: 'ShounenEnjoyer', avatar: 'https://i.pravatar.cc/150?u=a042581f4e29026705d' },
  user3: { id: 'u3', name: 'IsekaiWaifu', avatar: 'https://i.pravatar.cc/150?u=a042581f4e29026706d' },
  user4: { id: 'u4', name: 'Troll-kun', avatar: 'https://i.pravatar.cc/150?u=a042581f4e29026707d' },
  user5: { id: 'u5', name: 'SliceOfLifeLover', avatar: 'https://i.pravatar.cc/150?u=a042581f4e29026708d' },
};

const mockComments: Comment[] = [
  // ... existing mockComments
  {
    id: 'c1',
    user: mockUsers.user1,
    timestamp: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
    content: '–û—Ç–ª–∏—á–Ω–∞—è —Å–µ—Ä–∏—è! –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ, –∫–∞–∫ –≤—Å–µ–≥–¥–∞. –ù–µ –º–æ–≥—É –¥–æ–∂–¥–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–µ–π.',
    score: 15,
    replies: [
      {
        id: 'c1-r1',
        user: mockUsers.user2,
        timestamp: '1 —á–∞—Å –Ω–∞–∑–∞–¥',
        content: '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω! –ë–æ–µ–≤–∞—è —Å—Ü–µ–Ω–∞ –≤ –∫–æ–Ω—Ü–µ –±—ã–ª–∞ –ø—Ä–æ—Å—Ç–æ üî•üî•üî•',
        score: 7,
      },
    ],
  },
  {
    id: 'c2',
    user: mockUsers.user3,
    timestamp: '5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥',
    content: '–ù–µ–º–Ω–æ–≥–æ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–ª –±–æ–ª—å—à–µ–≥–æ –æ—Ç —ç—Ç–æ–π –∞—Ä–∫–∏, –ø–æ–∫–∞ —á—Ç–æ –≤—Å–µ —Å–ª–∏—à–∫–æ–º –∑–∞—Ç—è–Ω—É—Ç–æ.',
    score: 2,
  },
  {
    id: 'c3',
    user: mockUsers.user4,
    timestamp: '30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥',
    content: '–í—Å–µ –∫—Ç–æ —Ö–≤–∞–ª–∏—Ç —ç—Ç–æ—Ç —Ç–∞–π—Ç–ª - –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ —à–µ–¥–µ–≤—Ä—ã. –ú–∞–Ω–≥–∞ –±—ã–ª–∞ –ª—É—á—à–µ –≤ 100 —Ä–∞–∑.',
    score: -8,
  },
];

const mockUserProfile: UserProfile = {
    id: 'dragger1337',
    nickname: 'dragger1337',
    avatar: 'https://i.pravatar.cc/150?u=dragger1337',
    coverPhoto: 'https://images.alphacoders.com/131/1317676.jpeg',
    registrationDate: '31.05.2024',
    birthday: '11.09.2001',
    gender: '–ú—É–∂—Å–∫–æ–π',
    daysInARow: 0,
    bio: '–í—Å–µ–º –Ω–æ–≤–∏—á–∫–∞–º –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ 5, 12 —Å–µ—Ä–∏–π –∏ –ø–∏—à—É—Ç —Å–≤–æ—ë –Ω–∏–∫–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ–µ –º–Ω–µ–Ω–∏–µ –ø—Ä–æ—à—É –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å',
    viewingTime: { tv: 288, ova: 5, ona: 27, movies: 1, specials: 1, total: 324 },
};

const mockUserAnimeLists: UserAnimeList = {
    watching: [{id: 52991, name: 'sousou-no-frieren'}],
    planned: [{id: 136, name: 'hunter-x-hunter-2011'}, {id: 21, name: 'one-piece'}],
    completed: [{id: 9253, name: 'steins-gate'}, {id: 5114, name: 'fullmetal-alchemist-brotherhood'}],
    dropped: [{id: 30276, name: 'one-punch-man'}],
    favorite: [{id: 41467, name: 'Bleach'}]
};

// NEW MOCK DATA
export interface ActivityItem {
  id: string;
  type: 'comment' | 'status_update' | 'review';
  user: { id: string; name: string; avatar: string };
  timestamp: string;
  content: string;
  relatedAnime: { id: number; name: string };
}

const mockActivityFeed: ActivityItem[] = [
  {
    id: 'act1',
    type: 'comment',
    user: mockUsers.user1,
    timestamp: '15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥',
    content: '–≠—Ç–∞ —Å–µ—Ä–∏—è –±—ã–ª–∞ –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π! –û—Å–æ–±–µ–Ω–Ω–æ –∫–æ–Ω—Ü–æ–≤–∫–∞, —Å–∏–∂—É –≤ –º—É—Ä–∞—à–∫–∞—Ö.',
    relatedAnime: { id: 52991, name: '–ü—Ä–æ–≤–æ–∂–∞—é—â–∞—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É—Ç—å –§—Ä–∏—Ä–µ–Ω' }
  },
  {
    id: 'act2',
    type: 'status_update',
    user: mockUsers.user3,
    timestamp: '1 —á–∞—Å –Ω–∞–∑–∞–¥',
    content: '–¥–æ–±–∞–≤–∏–ª(–∞) –≤ "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"',
    relatedAnime: { id: 21, name: '–í–∞–Ω-–ü–∏—Å' }
  },
  {
    id: 'act3',
    type: 'status_update',
    user: mockUsers.user2,
    timestamp: '3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
    content: '–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª(–∞)',
    relatedAnime: { id: 9253, name: '–í—Ä–∞—Ç–∞ –®—Ç–µ–π–Ω–∞' }
  },
   {
    id: 'act4',
    type: 'comment',
    user: mockUsers.user5,
    timestamp: '5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥',
    content: '–ü–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—é –≤ —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑. –í—Å–µ –µ—â–µ –≥–µ–Ω–∏–∞–ª—å–Ω–æ. –õ—É—á—à–µ–µ –∞–Ω–∏–º–µ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω.',
    relatedAnime: { id: 5114, name: '–°—Ç–∞–ª—å–Ω–æ–π –∞–ª—Ö–∏–º–∏–∫: –ë—Ä–∞—Ç—Å—Ç–≤–æ' }
  },
];

const mockFriends = [
  mockUsers.user1, mockUsers.user2, mockUsers.user3, mockUsers.user4, mockUsers.user5
];


// --- API FUNCTIONS ---

const simulateDelay = <T>(data: T, delay: number): Promise<T> => 
    new Promise(resolve => setTimeout(() => resolve(data), delay));

export const getCommentsByEpisodeId = (episodeId: string): Promise<Comment[]> => {
  console.log(`Fetching comments for episode ${episodeId}`);
  return simulateDelay(mockComments, 500);
};

export const getUserProfile = (username: string): Promise<UserProfile> => {
    console.log(`Fetching profile for ${username}`);
    return simulateDelay(mockUserProfile, 300);
};

export const getUserAnimeLists = (username: string): Promise<UserAnimeList> => {
    console.log(`Fetching anime lists for ${username}`);
    return simulateDelay(mockUserAnimeLists, 400);
};

// NEW API FUNCTIONS
export const getCommunityActivityFeed = (): Promise<ActivityItem[]> => {
  console.log('Fetching community activity feed');
  return simulateDelay(mockActivityFeed, 600);
}

export const getFriendsList = (): Promise<{ id: string; name: string; avatar: string; }[]> => {
  console.log('Fetching friends list');
  return simulateDelay(mockFriends, 400);
}